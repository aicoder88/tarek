// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/[locale]/about/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/about">> = Specific
  const handler = {} as typeof import("../../app/[locale]/about/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/basement-finishing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/basement-finishing">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/basement-finishing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/bathroom-renovation/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/bathroom-renovation">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/bathroom-renovation/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/flooring/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/flooring">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/flooring/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/general-contracting/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/general-contracting">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/general-contracting/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/kitchen-remodeling/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/kitchen-remodeling">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/kitchen-remodeling/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/outdoor-landscaping/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/outdoor-landscaping">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/outdoor-landscaping/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/painting-drywall/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/painting-drywall">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/painting-drywall/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/prefabricated-structures/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/prefabricated-structures">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/prefabricated-structures/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/services/roofing-siding/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/services/roofing-siding">> = Specific
  const handler = {} as typeof import("../../app/[locale]/services/roofing-siding/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/sitemap/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/sitemap">> = Specific
  const handler = {} as typeof import("../../app/api/sitemap/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/[locale]/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/[locale]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
